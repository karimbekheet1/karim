package task;
class Employee {
    // Encapsulated fields
    private String name;
    private String id;
    private String department;

    // Constructor
    public Employee(String name, String id, String department) {
        this.name = name;
        this.id = id;
        this.department = department;
    }

    // Getter and setter methods for the fields
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getDepartment() {
        return department;
    }

    public void setDepartment(String department) {
        this.department = department;
    }
}

class Manager extends Employee {
    // Additional field specific to managers
    private String title;

    // Constructor
    public Manager(String name, String id, String department, String title) {
        // Call the superclass constructor
        super(name, id, department);
        this.title = title;
    }

    // Getter and setter methods for the additional field
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }
}

package task;


    public class Main {
        public static void main(String[] args) {
            // Create an Employee object
            Employee employee = new Employee("John Doe", "123456", "Accounting");

            // Set the employee's name
            employee.setName("Jane Doe");

            // Print the employee's information
            System.out.println("Employee name: " + employee.getName());
            System.out.println("Employee ID: " + employee.getId());
            System.out.println("Employee department: " + employee.getDepartment());

            // Create a Manager object
            Manager manager = new Manager("John Smith", "234567", "Marketing", "Director");

            // Print the manager's information
            System.out.println("\nManager name: " + manager.getName());
            System.out.println("Manager ID: " + manager.getId());
            System.out.println("Manager department: " + manager.getDepartment());
            System.out.println("Manager title: " + manager.getTitle());
        }
    }



import java.util.Scanner;

public class Employee {
    // attributes
    private String name;
    private int age;
    private int yearsOfExperience;
    private Address address;
    private Type type;
    private int hoursOfWorking;
    private int workingOnWeekends;

    // nested class for address
    class Address {
        private String street;
        private String city;
        private String state;
        private String zip;
    }

    // enum for employee types
    public enum Type {
        JUNIOR,
        SENIOR,
        LEAD
    }

    // constructor
    public Employee(String name, int age, int yearsOfExperience, Address address, Type type, int hoursOfWorking, int workingOnWeekends) {
        this.name = name;
        this.age = age;
        this.yearsOfExperience = yearsOfExperience;
        this.address = address;
        this.type = type;
        this.hoursOfWorking = hoursOfWorking;
        this.workingOnWeekends = workingOnWeekends;
    }

    // setters and getters
    public void setName(String name) {
        this.name = name;
    }
    public String getName() {
        return name;
    }
    public void setAge(int age) {
        this.age = age;
    }
    public int getAge() {
        return age;
    }
    public void setYearsOfExperience(int yearsOfExperience) {
        this.yearsOfExperience = yearsOfExperience;
    }
    public int getYearsOfExperience() {
        return yearsOfExperience;
    }
    public void setAddress(Address address) {
        this.address = address;
    }
    public Address getAddress() {
        return address;
    }
    public void setType(Type type) {
        this.type = type;
    }
    public Type getType() {
        return type;
    }
    public void setHoursOfWorking(int hoursOfWorking) {
        this.hoursOfWorking = hoursOfWorking;
    }
    public int getHoursOfWorking() {
        return hoursOfWorking;
    }
    public void setWorkingOnWeekends(int workingOnWeekends) {
        this.workingOnWeekends = workingOnWeekends;
    }
    public int getWorkingOnWeekends() {
        return workingOnWeekends;
    }

    // method to calculate salary
    public double calculateSalary() {
        double salary = 0;
        double baseRate = 8.0;
        double overtimeRate = 1.5;

        // base salary is hours of working * base rate
        salary = hoursOfWorking * baseRate;

        // overtime pay is overtime hours * overtime rate
        double overtimePay = (hoursOfWorking - 40) * overtimeRate;
        salary += overtimePay;

        // weekend pay is working on weekends * base rate
        double weekendPay = workingOnWeekends * baseRate;
        salary += weekendPay;

        // add bonus based on employee type
        if (type == Type.JUNIOR) {
            salary += 100;
        } else if (type == Type.SENIOR) {
            salary



